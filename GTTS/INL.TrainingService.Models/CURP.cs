using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace INL.TrainingService.Models
{
    public class CURP
    {
        public string GeneratedCURP { get; set; } /* Curp generated by function */
        public string BaseCURP { get; set; } /* Curp to compare with */

        private char[] Vowels = { 'A', 'E', 'I', 'O', 'U' };

        private String[] NoNames = { "DE", "LA", "LOS", "DEL", "EL", "LAS", "Y" };

        private List<MXStates> States = new List<MXStates> {
                new MXStates{State = "AGUASCALIENTES", Code = "AS"},
                new MXStates{State = "BAJA CALIFORNIA", Code = "BC"},
                new MXStates{State = "BAJA CALIFORNIA SUR", Code = "BS"},
                new MXStates{State = "CAMPECHE", Code = "CC"},
                new MXStates{State = "CHIAPAS", Code = "CS"},
                new MXStates{State = "CHIHUAHUA", Code = "CH"},
                new MXStates{State = "COAHUILA", Code = "CL"},
                new MXStates{State = "COLIMA", Code = "CM"},
                new MXStates{State = "DISTRITO FEDERAL", Code = "DF"},
                new MXStates{State = "DURANGO", Code = "DG"},
                new MXStates{State = "GUANAJUATO", Code = "GT"},
                new MXStates{State = "GUERRERO", Code = "GR"},
                new MXStates{State = "HIDALGO", Code = "HG"},
                new MXStates{State = "JALISCO", Code = "JC"},
                new MXStates{State = "MEXICO", Code = "MC"},
                new MXStates{State = "MICHOACAN", Code = "MN"},
                new MXStates{State = "MORELOS", Code = "MS"},
                new MXStates{State = "NAYARIT", Code = "NT"},
                new MXStates{State = "NUEVO LEON", Code = "NL"},
                new MXStates{State = "OAXACA", Code = "OC"},
                new MXStates{State = "PUEBLA", Code = "PL"},
                new MXStates{State ="QUERETARO", Code = "QT"},
                new MXStates{State = "QUINTANA ROO", Code = "QR"},
                new MXStates{State = "SAN LUIS POTOSI", Code = "SP"},
                new MXStates{State = "SINALOA", Code = "SL"},
                new MXStates{State = "SONORA", Code = "SR"},
                new MXStates{State = "TABASCO", Code = "TC"},
                new MXStates{State = "TAMAULIPAS", Code = "TS"},
                new MXStates{State = "TLAXCALA", Code = "TL"},
                new MXStates{State = "VERACRUZ", Code = "VZ"},
                new MXStates{State = "YUCATÁN", Code = "YN"},
                new MXStates{State = "ZACATECAS", Code = "ZS"},
                new MXStates{State = "NACIDO EXTRANJERO", Code = "NE"}
        };

        public CURP()
        {

        }

        internal string FirstLetter(string word)
        {
            if (String.IsNullOrWhiteSpace(word))
            {
                return "X";
            }

            char[] wordpart = word.ToUpper().ToCharArray();

            return wordpart.First().ToString();
        }

        internal string FirstNoStartingVowel(string word)
        {
            string vowelOne = "X";
            if (String.IsNullOrWhiteSpace(word))
            {
                return vowelOne;
            }

            char[] wordpart = word.ToUpper().ToCharArray();
            /*search first vowel after first character*/
            for (var i = 1; i < wordpart.Count(); i++)
            {
                if (Vowels.Contains(wordpart.ElementAtOrDefault(i)))
                {
                    vowelOne = wordpart.ElementAtOrDefault(i).ToString();
                    break;
                }
            }
            return vowelOne;
        }

        internal string FirstNoStartingConsonant(string word)
        {
            string consonantOne = "X";
            if (String.IsNullOrWhiteSpace(word))
            {
                return consonantOne;
            }

            char[] wordpart = word.ToUpper().ToCharArray();
            /*search first vowel after first character*/
            for (var i = 1; i < wordpart.Count(); i++)
            {
                if (!Vowels.Contains(wordpart.ElementAtOrDefault(i)))
                {
                    consonantOne = wordpart.ElementAtOrDefault(i).ToString();
                    break;
                }
            }

            if (consonantOne == "ñ" || consonantOne == "Ñ")
            {
                consonantOne = "X";
            }

            return consonantOne;
        }

        internal string DateSection(DateTime dateOfBirth)
        {
            return String.Format("{0:yyMMdd}", dateOfBirth);
        }

        internal string StateCode(string state)
        {
            string code = "NE";

            if (States.Any(s => String.Compare(s.State, state, CultureInfo.CurrentCulture, CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase) == 0))
            {
                return States.SingleOrDefault(s => String.Compare(s.State, state, CultureInfo.CurrentCulture, CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase) == 0).Code;
            }

            return code;
        }

        internal string GenderCode(string gender)
        {
            if (String.IsNullOrWhiteSpace(gender))
            {
                return "X";
            }
            gender = gender.ToUpper();
            if (gender.Equals("MALE") || gender.Equals("HOMBRE") || gender.Equals("M"))
            {
                return "H";
            }
            else if (gender.Equals("FEMALE") || gender.Equals("MUJER") || gender.Equals("F"))
            {
                return "M";
            }
            return "X";
        }




        /* Receive parameters and generate CURP */

        /* Compare against baseCURP */

        /* Colect possible mistakes, Name, LastNames, SecondLastname, DOB, Gender, StateOfBirth, */
        /* If length is different, check if there are to digits at the end*/


        /* Check if the Format is Valid */
        internal bool IsValidFormat(string curp)
        {
            if (String.IsNullOrWhiteSpace(curp)) return false;

            Regex rgx = new Regex(@"^[A-Z]{1}[AEIOUX]{1}[A-Z]{2}[0-9]{2}(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])[HM]{1}(AS|BC|BS|CC|CS|CH|CL|CM|DF|DG|GT|GR|HG|JC|MC|MN|MS|NT|NL|OC|PL|QT|QR|SP|SL|SR|TC|TS|TL|VZ|YN|ZS|NE)[B-DF-HJ-NP-TV-Z]{3}[0-9A-Z]{1}[0-9]{1}$");
            return rgx.IsMatch(curp);
        }

        /* Check if the baseCURP format is valid */
        internal bool IsValidFormat()
        {
            return IsValidFormat(BaseCURP);
        }

        internal bool IsValidDateOfBirth(DateTime dateTime)
        {
            if (String.IsNullOrWhiteSpace(BaseCURP)) return false;

            if (BaseCURP.Length < 10) return false;

            /* Extract middle part of the CURP Ej: SIHC400128HDFLLR01 */
            string datePart = BaseCURP.ToUpper().Substring(4, 6);

            /* Compare against format generated from DOB */
            string dateSection = DateSection(dateTime);

            return datePart.Equals(dateSection);
        }

        internal bool IsValidGender(string gender)
        {
            if (String.IsNullOrWhiteSpace(gender) || String.IsNullOrWhiteSpace(BaseCURP)) return false;
            if (BaseCURP.Length < 11) return false;

            /*Extract Gender literal from baseCURP */
            string genderPart = BaseCURP.ToUpper().Substring(10, 1);

            string genderCode = GenderCode(gender);

            return (genderPart.Equals(genderCode));
        }

        internal bool IsValidState(string state)
        {
            if (String.IsNullOrWhiteSpace(state) || String.IsNullOrWhiteSpace(BaseCURP)) return false;
            if (BaseCURP.Length < 11) return false;

            /*Extract Gender literal from baseCURP */
            string statePart = BaseCURP.ToUpper().Substring(11, 2);

            string stateCode = StateCode(state);

            return (statePart.Equals(stateCode));
        }

        /*This Method will check only if the state part exists */
        internal bool IsValidStatePart()
        {
            if (String.IsNullOrWhiteSpace(BaseCURP)) return false;
            if (BaseCURP.Length <= 13) return false;

            string statePart = BaseCURP.ToUpper().Substring(11, 2);

            return States.Any(st => st.Code.Equals(statePart)) || statePart.Equals("NE");
        }

        /* Internat class to store state-code values for the CURP */
        class MXStates
        {
            public string State { get; set; }
            public string Code { get; set; }
        }


        internal bool IsValidLength()
        {
            if (String.IsNullOrWhiteSpace(BaseCURP)) return false;
            return (BaseCURP.Length == 18);
        }
    }
}
